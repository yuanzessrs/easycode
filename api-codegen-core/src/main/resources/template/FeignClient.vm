## 包名
package ${config.basePackage}.${config.feignClientPackageName};

## import 依赖
#foreach($import in $handlerClass.getFeignClientImportsWithFilter())
import $import;
#end
import ${config.basePackage}.${config.dtoPackageName}.*;

/**
 * @interface-name ${handlerClass.feignClientName}
 * @description ${handlerClass.description}
 * @author api-codegen
 **/
#foreach($annotation in $handlerClass.getAnnotations().getDescSorted())
${annotation.toString()}
#end
#foreach($annotation in $handlerClass.getFeignClientAnnotations().getDescSorted())
${annotation.toString()}
#end
public interface ${handlerClass.feignClientName} {

#if($handlerClass.handlerMethods)
#foreach($handlerMethod in $handlerClass.handlerMethods)

    /**
     * <pre>
     * $handlerMethod.summary @Summary
     * </pre>
     * $handlerMethod.description @Description
     *
#foreach($handlerMethodParam in $handlerMethod.handlerMethodParams)
     * @param ${handlerMethodParam.name} ${handlerMethodParam.description}
#end
## 如果返回类型不为void，则需要增加描述
#if($handlerMethod.handlerMethodReturn.hasReturn())
     * @return ${handlerMethod.handlerMethodReturn.description}
     */
#else
     */
#end
#foreach($annotation in $handlerMethod.getAnnotations().getDescSorted())
    ${annotation.toString()}
#end
#foreach($annotation in $handlerMethod.getFeignClientAnnotations().getDescSorted())
    ${annotation.toString()}
#end
    $handlerMethod.handlerMethodReturn.type ${handlerMethod.methodName}(#if($handlerMethod.handlerMethodParams)#foreach($handlerMethodParam in $handlerMethod.handlerMethodParams)
#foreach($annotation in $handlerMethodParam.getAnnotations().getAscSorted())${annotation.toString()} #end
#foreach($annotation in $handlerMethodParam.getFeignClientAnnotations().getAscSorted())${annotation.toString()} #end
${handlerMethodParam.type} ${handlerMethodParam.name}#if($velocityCount<$handlerMethod.handlerMethodParams.size()),
   ${handlerMethod.paramPadding()}   #end
#end#end);
#end
#end

}