package ${config.basePackage}.${config.dtoPackageName};

#foreach($import in $definition.getExternalImportsWithFilter())
import $import;
#end

/**
 * @author api-codegen
 * @class-name ${definition.name}
 * @description ${definition.description}
 **/
#foreach($annotation in $definition.getAnnotations().getDescSorted())
${annotation.toString()}
#end
public class ${definition.name} {
#foreach($field in $definition.fields)

    /**
     * ${field.description}
     */
#foreach($annotation in $field.getAnnotations().getAscSorted())
    ${annotation.toString()}
#end
    private#if($field.readOnly) final#end ${field.type} ${field.name}$field.value();
#end
#if(!$field.hasBuidler)
#foreach($field in $definition.fields)
#if(!$definition.hideGetFiledMethod)

    public ${field.type} get${field.upperCamelCaseName()}() {
        return ${field.name};
    }
#end
#if($field.readOnly==false)
#if(!$definition.hideSetFiledMethod)

    public void set${field.upperCamelCaseName()}(${field.type} ${field.name}) {
        this.${field.name} = ${field.name};
    }
#end
#end#end
#end
#if(${definition.overrideToString})
    ${definition.overrideToString}
#end
#foreach($definition in $definition.getInnerDtos())

    /**
    * @author api-codegen
    * @class-name ${definition.name}
    * @description ${definition.description}
    **/
#foreach($annotation in $definition.getAnnotations().getDescSorted())
    ${annotation.toString()}
#end
    public static class ${definition.name} {
        #foreach($field in $definition.fields)

        /**
        * ${field.description}
        */
#foreach($annotation in $field.getAnnotations().getAscSorted())
        ${annotation.toString()}
#end
        private#if($field.readOnly) final#end ${field.type} ${field.name}$field.value();
        #end
#if(!$field.hasBuidler)
        #foreach($field in $definition.fields)
#if(!$definition.hideGetFiledMethod)

        public ${field.type} get${field.upperCamelCaseName()}() {
            return ${field.name};
        }
#end
    #if($field.readOnly==false)
#if(!$definition.hideSetFiledMethod)

        public void set${field.upperCamelCaseName()}(${field.type} ${field.name}) {
            this.${field.name} = ${field.name};
        }
#end
    #end#end
#end
#foreach($definition in $definition.getInnerDtos())

        /**
        * @author api-codegen
        * @class-name ${definition.name}
        * @description ${definition.description}
        **/
#foreach($annotation in $definition.getAnnotations().getDescSorted())
        ${annotation.toString()}
#end
        public static class ${definition.name} {
            #foreach($field in $definition.fields)

            /**
            * ${field.description}
            */
#foreach($annotation in $field.getAnnotations().getAscSorted())
            ${annotation.toString()}
#end
            private#if($field.readOnly) final#end ${field.type} ${field.name}$field.value();
            #end
#if(!$field.hasBuidler)
            #foreach($field in $definition.fields)

            public ${field.type} get${field.upperCamelCaseName()}() {
                return ${field.name};
            }
            #if($field.readOnly==false)

            public void set${field.upperCamelCaseName()}(${field.type} ${field.name}) {
                this.${field.name} = ${field.name};
            }
            #end#end
#end

        }
#end

    }
#end

}